# -*- coding: utf-8 -*-
"""Project3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lMSV5F339TTbAc-c6y9hQYUW_vXB0Pjl
"""

from pgmpy.models import BayesianModel

!pip install pgmpy

chest_clinic_model=BayesianModel([('asia','tub'),('smoke','lung'),('tub','either'),('lung','either'),('either','xray'),('either','dysp'),('smoke','bronc'),('bronc','dysp')])

from pgmpy.factors.discrete import  TabularCPD

cpd_asia=TabularCPD(variable='asia',
                    variable_card=2,
                    values=[[0.01],[0.99]])
cpd_tub=TabularCPD(variable='tub',
                   variable_card=2,
                   values=[[0.05,0.01],[0.95,0.99]],
                   evidence=['asia'],
                   evidence_card=[2])
cpd_smoke=TabularCPD(variable='smoke',
                     variable_card=2,
                     values=[[0.5],[0.5]])

cpd_lung=TabularCPD(variable='lung',
                   variable_card=2,
                   values=[[0.1,0.01],[0.9,0.99]],
                   evidence=['smoke'],
                   evidence_card=[2])
cpd_bronc=TabularCPD(variable='bronc',
                   variable_card=2,
                   values=[[0.6,0.3],[0.4,0.7]],
                   evidence=['smoke'],
                   evidence_card=[2])

cpd_either=TabularCPD(variable='either',
                      variable_card=2,
                      values=[[1,1,1,0],[0,0,0,1]],
                      evidence=['tub','lung'],
                      evidence_card=[2,2])

cpd_xray=TabularCPD(variable='xray',
                   variable_card=2,
                   values=[[0.98,0.05],[0.02,0.95]],
                   evidence=['either'],
                   evidence_card=[2])
cpd_dysp=TabularCPD(variable='dysp',
                      variable_card=2,
                      values=[[0.9,0.7,0.8,0.1],[0.1,0.3,0.2,0.9]],
                      evidence=['bronc','either'],
                      evidence_card=[2,2])

chest_clinic_model.add_cpds(cpd_asia,cpd_smoke,cpd_tub,cpd_lung,cpd_either,cpd_bronc,cpd_xray,cpd_dysp)

chest_clinic_model.check_model()

chest_clinic_model.get_independencies()

chest_clinic_model.nodes()

chest_clinic_model.edges()

chest_clinic_model.get_cpds()

#inference of bayesian model
 from pgmpy.inference import VariableElimination
inference = VariableElimination(chest_clinic_model)
Clinic_prob = inference.query(variables=['tub','lung','bronc'],
                               evidence={'asia':0,'xray':0})

print(Clinic_prob)

"""###The joint probability of "tub=yes, lung=yes, bronc=yes", given evidence that "asia=yes, xray=yes" is  0.016"""

import networkx as nx
nx.draw(chest_clinic_model, with_labels=True)
plt.show()

Markov_chest_clinic_model=chest_clinic_model.to_markov_model()

import networkx as nx
from matplotlib import pyplot as plt
nx.draw(Markov_chest_clinic_model, with_labels=True)
from google.colab import files
plt.savefig("abc.png")
files.download("abc.png")

triangulated_MCCM=Markov_chest_clinic_model.triangulate()

import networkx as nx
nx.draw(triangulated_MCCM, with_labels=True)
from google.colab import files
plt.savefig("traingulated.png")
files.download("traingulated.png")

Junction_tree_MCCM=triangulated_MCCM.to_junction_tree()



fig, ax = plt.subplots(1,1)
nx.draw(Junction_tree_MCCM, with_labels=True,ax=ax)
ax.set_xbound(-4,4)
plt.savefig("JT.png")
files.download("JT.png") 
plt.show()
#description = nx.draw_networkx_labels(G,pos,labels=labels)

"""##Explain why the "running intersection property" is satisfied in your junction tree.
According to the running intersection property if a variable X is present in two cluster it should also be present in the unique path that connects the two cluster. In our example cluster containing ('tub','lung','smoke','asia')
and ('xray','tub','lung','either','bronc') each have variable 'tub' . The two cluster are connected with the cluster('xray','tub','lung') which also has variable tub. hence it follows the property of running the intersection property.
"""



"""Futher solution written in the report."""



